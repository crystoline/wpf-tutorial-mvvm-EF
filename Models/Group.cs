//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Runtime.Serialization;

namespace DBApp1.Models
{
    using System;
    using System.Collections.Generic;
    using System.Windows;

    public partial class Group: NotifyPropertyChanged
    {
        

        public int Id { get ; set; }
        public string name { get; set; }
        public string Description { get; set; }

        public bool GetIsSelected()
        {
            return _selected;
        }

        private void SetIsSelected(bool value)
        {
            _selected = value;
        }

        public Nullable<System.DateTime> CreatedAt { get; set; }
        public Nullable<System.DateTime> UpdatedAt { get; set; }

        private bool _selected = false;
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]

        public virtual ICollection<StaffGroup> StaffGroups { get; set; }




       

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage",
            "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Group()
        {
            this.StaffGroups = new HashSet<StaffGroup>();
        }

        public void Check(List<int?> Ids)
        {
            if (Ids.Contains(this.Id))
            {
                MessageBox.Show($"GroupID {Id} is available");
                this.SetIsSelected(true);
            }
        }
        public void HasChnaged()
        {
            OnPropertyChanged("name");
            OnPropertyChanged("Description");
        }

        public string ShortDescription
        {
            get
            {
                if (Description?.Length > 20)
                {
                    return Description.Substring(0, 20);
                }

                return Description;
            }
        }

        public int StaffCount
        {
            get { return StaffGroups.Count; }
        }

    }
}
